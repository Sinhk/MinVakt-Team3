/*
 * This file is generated by jOOQ.
*/
package minvakt.datamodel.tables;


import minvakt.datamodel.GScrum03;
import minvakt.datamodel.Keys;
import minvakt.datamodel.tables.records.ShiftRecord;
import org.jooq.*;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Shift extends TableImpl<ShiftRecord> {

    private static final long serialVersionUID = 570665201;

    /**
     * The reference instance of <code>g_scrum03.shift</code>
     */
    public static final Shift SHIFT = new Shift();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ShiftRecord> getRecordType() {
        return ShiftRecord.class;
    }

    /**
     * The column <code>g_scrum03.shift.shift_id</code>.
     */
    public final TableField<ShiftRecord, Integer> SHIFT_ID = createField("shift_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>g_scrum03.shift.responsible_employee_id</code>.
     */
    public final TableField<ShiftRecord, Integer> RESPONSIBLE_EMPLOYEE_ID = createField("responsible_employee_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>g_scrum03.shift.from_time</code>.
     */
    public final TableField<ShiftRecord, LocalDateTime> FROM_TIME = createField("from_time", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>g_scrum03.shift.to_time</code>.
     */
    public final TableField<ShiftRecord, LocalDateTime> TO_TIME = createField("to_time", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * Create a <code>g_scrum03.shift</code> table reference
     */
    public Shift() {
        this("shift", null);
    }

    /**
     * Create an aliased <code>g_scrum03.shift</code> table reference
     */
    public Shift(String alias) {
        this(alias, SHIFT);
    }

    private Shift(String alias, Table<ShiftRecord> aliased) {
        this(alias, aliased, null);
    }

    private Shift(String alias, Table<ShiftRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return GScrum03.G_SCRUM03;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ShiftRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SHIFT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ShiftRecord> getPrimaryKey() {
        return Keys.KEY_SHIFT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ShiftRecord>> getKeys() {
        return Arrays.<UniqueKey<ShiftRecord>>asList(Keys.KEY_SHIFT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ShiftRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ShiftRecord, ?>>asList(Keys.SHIFT_RESPONSIBLE_ID_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Shift as(String alias) {
        return new Shift(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Shift rename(String name) {
        return new Shift(name, null);
    }
}
