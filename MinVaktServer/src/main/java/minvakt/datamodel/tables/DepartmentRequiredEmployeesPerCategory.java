/*
 * This file is generated by jOOQ.
*/
package minvakt.datamodel.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import minvakt.datamodel.GScrum03;
import minvakt.datamodel.Keys;
import minvakt.datamodel.tables.records.DepartmentRequiredEmployeesPerCategoryRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DepartmentRequiredEmployeesPerCategory extends TableImpl<DepartmentRequiredEmployeesPerCategoryRecord> {

    private static final long serialVersionUID = -484652217;

    /**
     * The reference instance of <code>g_scrum03.department_required_employees_per_category</code>
     */
    public static final DepartmentRequiredEmployeesPerCategory DEPARTMENT_REQUIRED_EMPLOYEES_PER_CATEGORY = new DepartmentRequiredEmployeesPerCategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DepartmentRequiredEmployeesPerCategoryRecord> getRecordType() {
        return DepartmentRequiredEmployeesPerCategoryRecord.class;
    }

    /**
     * The column <code>g_scrum03.department_required_employees_per_category.id</code>.
     */
    public final TableField<DepartmentRequiredEmployeesPerCategoryRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>g_scrum03.department_required_employees_per_category.department_id</code>.
     */
    public final TableField<DepartmentRequiredEmployeesPerCategoryRecord, Short> DEPARTMENT_ID = createField("department_id", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>g_scrum03.department_required_employees_per_category.category_id</code>.
     */
    public final TableField<DepartmentRequiredEmployeesPerCategoryRecord, Short> CATEGORY_ID = createField("category_id", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>g_scrum03.department_required_employees_per_category.amount</code>.
     */
    public final TableField<DepartmentRequiredEmployeesPerCategoryRecord, Short> AMOUNT = createField("amount", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * Create a <code>g_scrum03.department_required_employees_per_category</code> table reference
     */
    public DepartmentRequiredEmployeesPerCategory() {
        this("department_required_employees_per_category", null);
    }

    /**
     * Create an aliased <code>g_scrum03.department_required_employees_per_category</code> table reference
     */
    public DepartmentRequiredEmployeesPerCategory(String alias) {
        this(alias, DEPARTMENT_REQUIRED_EMPLOYEES_PER_CATEGORY);
    }

    private DepartmentRequiredEmployeesPerCategory(String alias, Table<DepartmentRequiredEmployeesPerCategoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private DepartmentRequiredEmployeesPerCategory(String alias, Table<DepartmentRequiredEmployeesPerCategoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return GScrum03.G_SCRUM03;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DepartmentRequiredEmployeesPerCategoryRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DEPARTMENT_REQUIRED_EMPLOYEES_PER_CATEGORY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DepartmentRequiredEmployeesPerCategoryRecord> getPrimaryKey() {
        return Keys.KEY_DEPARTMENT_REQUIRED_EMPLOYEES_PER_CATEGORY_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DepartmentRequiredEmployeesPerCategoryRecord>> getKeys() {
        return Arrays.<UniqueKey<DepartmentRequiredEmployeesPerCategoryRecord>>asList(Keys.KEY_DEPARTMENT_REQUIRED_EMPLOYEES_PER_CATEGORY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<DepartmentRequiredEmployeesPerCategoryRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DepartmentRequiredEmployeesPerCategoryRecord, ?>>asList(Keys.DEPARTMENT_REQUIRED_EMPLOYEES_DEPARTMENT_ID_FK, Keys.DEPARTMENT_REQUIRED_EMPLOYEES_CATEGORY_ID_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DepartmentRequiredEmployeesPerCategory as(String alias) {
        return new DepartmentRequiredEmployeesPerCategory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DepartmentRequiredEmployeesPerCategory rename(String name) {
        return new DepartmentRequiredEmployeesPerCategory(name, null);
    }
}
