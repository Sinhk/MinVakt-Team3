/*
 * This file is generated by jOOQ.
*/
package minvakt.datamodel.tables.pojos;


import java.io.Serializable;
import java.math.BigInteger;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Table;


/**
 * VIEW
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Table(name = "missing_per_shift_category", schema = "g_scrum03")
public class MissingPerShiftCategory implements Serializable {

    private static final long serialVersionUID = 566083610;

    private Integer    shiftId;
    private Short      categoryId;
    private Long       countAssigned;
    private Long       countRequired;
    private BigInteger missing;

    public MissingPerShiftCategory() {}

    public MissingPerShiftCategory(MissingPerShiftCategory value) {
        this.shiftId = value.shiftId;
        this.categoryId = value.categoryId;
        this.countAssigned = value.countAssigned;
        this.countRequired = value.countRequired;
        this.missing = value.missing;
    }

    public MissingPerShiftCategory(
        Integer    shiftId,
        Short      categoryId,
        Long       countAssigned,
        Long       countRequired,
        BigInteger missing
    ) {
        this.shiftId = shiftId;
        this.categoryId = categoryId;
        this.countAssigned = countAssigned;
        this.countRequired = countRequired;
        this.missing = missing;
    }

    @Column(name = "shift_id", nullable = false, precision = 10)
    public Integer getShiftId() {
        return this.shiftId;
    }

    public void setShiftId(Integer shiftId) {
        this.shiftId = shiftId;
    }

    @Column(name = "category_id", nullable = false, precision = 5)
    public Short getCategoryId() {
        return this.categoryId;
    }

    public void setCategoryId(Short categoryId) {
        this.categoryId = categoryId;
    }

    @Column(name = "count_assigned", nullable = false, precision = 19)
    public Long getCountAssigned() {
        return this.countAssigned;
    }

    public void setCountAssigned(Long countAssigned) {
        this.countAssigned = countAssigned;
    }

    @Column(name = "count_required", precision = 11)
    public Long getCountRequired() {
        return this.countRequired;
    }

    public void setCountRequired(Long countRequired) {
        this.countRequired = countRequired;
    }

    @Column(name = "missing", precision = 21)
    public BigInteger getMissing() {
        return this.missing;
    }

    public void setMissing(BigInteger missing) {
        this.missing = missing;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("MissingPerShiftCategory (");

        sb.append(shiftId);
        sb.append(", ").append(categoryId);
        sb.append(", ").append(countAssigned);
        sb.append(", ").append(countRequired);
        sb.append(", ").append(missing);

        sb.append(")");
        return sb.toString();
    }
}
