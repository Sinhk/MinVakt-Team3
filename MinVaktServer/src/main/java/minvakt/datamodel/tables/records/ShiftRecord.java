/*
 * This file is generated by jOOQ.
*/
package minvakt.datamodel.tables.records;


import minvakt.datamodel.tables.Shift;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

import javax.annotation.Generated;
import javax.persistence.*;
import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "shift", schema = "g_scrum03")
public class ShiftRecord extends UpdatableRecordImpl<ShiftRecord> implements Record4<Integer, Integer, LocalDateTime, LocalDateTime> {

    private static final long serialVersionUID = 1801904603;

    /**
     * Setter for <code>g_scrum03.shift.shift_id</code>.
     */
    public void setShiftId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>g_scrum03.shift.shift_id</code>.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "shift_id", unique = true, nullable = false, precision = 10)
    public Integer getShiftId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>g_scrum03.shift.responsible_employee_id</code>.
     */
    public void setResponsibleEmployeeId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>g_scrum03.shift.responsible_employee_id</code>.
     */
    @Column(name = "responsible_employee_id", nullable = false, precision = 10)
    public Integer getResponsibleEmployeeId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>g_scrum03.shift.from_time</code>.
     */
    public void setFromTime(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>g_scrum03.shift.from_time</code>.
     */
    @Column(name = "from_time", nullable = false)
    public LocalDateTime getFromTime() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>g_scrum03.shift.to_time</code>.
     */
    public void setToTime(LocalDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>g_scrum03.shift.to_time</code>.
     */
    @Column(name = "to_time", nullable = false)
    public LocalDateTime getToTime() {
        return (LocalDateTime) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, Integer, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, Integer, LocalDateTime, LocalDateTime> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return Shift.SHIFT.SHIFT_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field2() {
        return Shift.SHIFT.RESPONSIBLE_EMPLOYEE_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<LocalDateTime> field3() {
        return Shift.SHIFT.FROM_TIME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<LocalDateTime> field4() {
        return Shift.SHIFT.TO_TIME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getShiftId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value2() {
        return getResponsibleEmployeeId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime value3() {
        return getFromTime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime value4() {
        return getToTime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ShiftRecord value1(Integer value) {
        setShiftId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ShiftRecord value2(Integer value) {
        setResponsibleEmployeeId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ShiftRecord value3(LocalDateTime value) {
        setFromTime(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ShiftRecord value4(LocalDateTime value) {
        setToTime(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ShiftRecord values(Integer value1, Integer value2, LocalDateTime value3, LocalDateTime value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ShiftRecord
     */
    public ShiftRecord() {
        super(Shift.SHIFT);
    }

    /**
     * Create a detached, initialised ShiftRecord
     */
    public ShiftRecord(Integer shiftId, Integer responsibleEmployeeId, LocalDateTime fromTime, LocalDateTime toTime) {
        super(Shift.SHIFT);

        set(0, shiftId);
        set(1, responsibleEmployeeId);
        set(2, fromTime);
        set(3, toTime);
    }
}
