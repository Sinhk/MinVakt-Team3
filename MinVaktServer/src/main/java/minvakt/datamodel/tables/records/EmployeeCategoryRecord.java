/*
 * This file is generated by jOOQ.
*/
package minvakt.datamodel.tables.records;


import minvakt.datamodel.tables.EmployeeCategory;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

import javax.annotation.Generated;
import javax.persistence.*;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "employee_category", schema = "g_scrum03")
public class EmployeeCategoryRecord extends UpdatableRecordImpl<EmployeeCategoryRecord> implements Record4<Integer, String, Boolean, Boolean> {

    private static final long serialVersionUID = -1293011176;

    /**
     * Setter for <code>g_scrum03.employee_category.category_id</code>.
     */
    public void setCategoryId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>g_scrum03.employee_category.category_id</code>.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "category_id", unique = true, nullable = false, precision = 10)
    public Integer getCategoryId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>g_scrum03.employee_category.category_name</code>.
     */
    public void setCategoryName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>g_scrum03.employee_category.category_name</code>.
     */
    @Column(name = "category_name", nullable = false, length = 30)
    public String getCategoryName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>g_scrum03.employee_category.admin</code>.
     */
    public void setAdmin(Boolean value) {
        set(2, value);
    }

    /**
     * Getter for <code>g_scrum03.employee_category.admin</code>.
     */
    @Column(name = "admin")
    public Boolean getAdmin() {
        return (Boolean) get(2);
    }

    /**
     * Setter for <code>g_scrum03.employee_category.available_for_shifts</code>.
     */
    public void setAvailableForShifts(Boolean value) {
        set(3, value);
    }

    /**
     * Getter for <code>g_scrum03.employee_category.available_for_shifts</code>.
     */
    @Column(name = "available_for_shifts")
    public Boolean getAvailableForShifts() {
        return (Boolean) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, String, Boolean, Boolean> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, String, Boolean, Boolean> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return EmployeeCategory.EMPLOYEE_CATEGORY.CATEGORY_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return EmployeeCategory.EMPLOYEE_CATEGORY.CATEGORY_NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Boolean> field3() {
        return EmployeeCategory.EMPLOYEE_CATEGORY.ADMIN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Boolean> field4() {
        return EmployeeCategory.EMPLOYEE_CATEGORY.AVAILABLE_FOR_SHIFTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getCategoryId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getCategoryName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean value3() {
        return getAdmin();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean value4() {
        return getAvailableForShifts();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EmployeeCategoryRecord value1(Integer value) {
        setCategoryId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EmployeeCategoryRecord value2(String value) {
        setCategoryName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EmployeeCategoryRecord value3(Boolean value) {
        setAdmin(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EmployeeCategoryRecord value4(Boolean value) {
        setAvailableForShifts(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EmployeeCategoryRecord values(Integer value1, String value2, Boolean value3, Boolean value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached EmployeeCategoryRecord
     */
    public EmployeeCategoryRecord() {
        super(EmployeeCategory.EMPLOYEE_CATEGORY);
    }

    /**
     * Create a detached, initialised EmployeeCategoryRecord
     */
    public EmployeeCategoryRecord(Integer categoryId, String categoryName, Boolean admin, Boolean availableForShifts) {
        super(EmployeeCategory.EMPLOYEE_CATEGORY);

        set(0, categoryId);
        set(1, categoryName);
        set(2, admin);
        set(3, availableForShifts);
    }
}
