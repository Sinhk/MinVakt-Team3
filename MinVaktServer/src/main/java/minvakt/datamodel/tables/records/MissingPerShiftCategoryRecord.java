/*
 * This file is generated by jOOQ.
*/
package minvakt.datamodel.tables.records;


import java.math.BigInteger;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Table;

import minvakt.datamodel.tables.MissingPerShiftCategory;

import org.jooq.Field;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.TableRecordImpl;


/**
 * VIEW
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Table(name = "missing_per_shift_category", schema = "g_scrum03")
public class MissingPerShiftCategoryRecord extends TableRecordImpl<MissingPerShiftCategoryRecord> implements Record5<Integer, Short, Long, Long, BigInteger> {

    private static final long serialVersionUID = 1015829873;

    /**
     * Setter for <code>g_scrum03.missing_per_shift_category.shift_id</code>.
     */
    public void setShiftId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>g_scrum03.missing_per_shift_category.shift_id</code>.
     */
    @Column(name = "shift_id", nullable = false, precision = 10)
    public Integer getShiftId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>g_scrum03.missing_per_shift_category.category_id</code>.
     */
    public void setCategoryId(Short value) {
        set(1, value);
    }

    /**
     * Getter for <code>g_scrum03.missing_per_shift_category.category_id</code>.
     */
    @Column(name = "category_id", nullable = false, precision = 5)
    public Short getCategoryId() {
        return (Short) get(1);
    }

    /**
     * Setter for <code>g_scrum03.missing_per_shift_category.count_assigned</code>.
     */
    public void setCountAssigned(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>g_scrum03.missing_per_shift_category.count_assigned</code>.
     */
    @Column(name = "count_assigned", nullable = false, precision = 19)
    public Long getCountAssigned() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>g_scrum03.missing_per_shift_category.count_required</code>.
     */
    public void setCountRequired(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>g_scrum03.missing_per_shift_category.count_required</code>.
     */
    @Column(name = "count_required", precision = 11)
    public Long getCountRequired() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>g_scrum03.missing_per_shift_category.missing</code>.
     */
    public void setMissing(BigInteger value) {
        set(4, value);
    }

    /**
     * Getter for <code>g_scrum03.missing_per_shift_category.missing</code>.
     */
    @Column(name = "missing", precision = 21)
    public BigInteger getMissing() {
        return (BigInteger) get(4);
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row5<Integer, Short, Long, Long, BigInteger> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row5<Integer, Short, Long, Long, BigInteger> valuesRow() {
        return (Row5) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return MissingPerShiftCategory.MISSING_PER_SHIFT_CATEGORY.SHIFT_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field2() {
        return MissingPerShiftCategory.MISSING_PER_SHIFT_CATEGORY.CATEGORY_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field3() {
        return MissingPerShiftCategory.MISSING_PER_SHIFT_CATEGORY.COUNT_ASSIGNED;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field4() {
        return MissingPerShiftCategory.MISSING_PER_SHIFT_CATEGORY.COUNT_REQUIRED;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<BigInteger> field5() {
        return MissingPerShiftCategory.MISSING_PER_SHIFT_CATEGORY.MISSING;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getShiftId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value2() {
        return getCategoryId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value3() {
        return getCountAssigned();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value4() {
        return getCountRequired();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BigInteger value5() {
        return getMissing();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MissingPerShiftCategoryRecord value1(Integer value) {
        setShiftId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MissingPerShiftCategoryRecord value2(Short value) {
        setCategoryId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MissingPerShiftCategoryRecord value3(Long value) {
        setCountAssigned(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MissingPerShiftCategoryRecord value4(Long value) {
        setCountRequired(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MissingPerShiftCategoryRecord value5(BigInteger value) {
        setMissing(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MissingPerShiftCategoryRecord values(Integer value1, Short value2, Long value3, Long value4, BigInteger value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MissingPerShiftCategoryRecord
     */
    public MissingPerShiftCategoryRecord() {
        super(MissingPerShiftCategory.MISSING_PER_SHIFT_CATEGORY);
    }

    /**
     * Create a detached, initialised MissingPerShiftCategoryRecord
     */
    public MissingPerShiftCategoryRecord(Integer shiftId, Short categoryId, Long countAssigned, Long countRequired, BigInteger missing) {
        super(MissingPerShiftCategory.MISSING_PER_SHIFT_CATEGORY);

        set(0, shiftId);
        set(1, categoryId);
        set(2, countAssigned);
        set(3, countRequired);
        set(4, missing);
    }
}
